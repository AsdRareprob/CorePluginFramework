// Generated by Dagger (https://dagger.dev).
package com.rareprob.core_pulgin.plugins.reward.di;

import com.rareprob.core_pulgin.plugins.reward.domain.repository.RewardRepository;
import com.rareprob.core_pulgin.plugins.reward.domain.use_case.ThemeUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RewardModule_ProvideThemeUseCaseFactory implements Factory<ThemeUseCase> {
  private final Provider<RewardRepository> repositoryProvider;

  public RewardModule_ProvideThemeUseCaseFactory(Provider<RewardRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public ThemeUseCase get() {
    return provideThemeUseCase(repositoryProvider.get());
  }

  public static RewardModule_ProvideThemeUseCaseFactory create(
      Provider<RewardRepository> repositoryProvider) {
    return new RewardModule_ProvideThemeUseCaseFactory(repositoryProvider);
  }

  public static ThemeUseCase provideThemeUseCase(RewardRepository repository) {
    return Preconditions.checkNotNullFromProvides(RewardModule.INSTANCE.provideThemeUseCase(repository));
  }
}
