// Generated by Dagger (https://dagger.dev).
package com.rareprob.core_pulgin.plugins.reward.di;

import com.google.firebase.remoteconfig.FirebaseRemoteConfig;
import com.rareprob.core_pulgin.plugins.reward.data.local.RewardDatabase;
import com.rareprob.core_pulgin.plugins.reward.domain.repository.RewardRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RewardModule_ProvideRewardRepositoryFactory implements Factory<RewardRepository> {
  private final Provider<RewardDatabase> dbProvider;

  private final Provider<FirebaseRemoteConfig> remoteConfigInstanceProvider;

  public RewardModule_ProvideRewardRepositoryFactory(Provider<RewardDatabase> dbProvider,
      Provider<FirebaseRemoteConfig> remoteConfigInstanceProvider) {
    this.dbProvider = dbProvider;
    this.remoteConfigInstanceProvider = remoteConfigInstanceProvider;
  }

  @Override
  public RewardRepository get() {
    return provideRewardRepository(dbProvider.get(), remoteConfigInstanceProvider.get());
  }

  public static RewardModule_ProvideRewardRepositoryFactory create(
      Provider<RewardDatabase> dbProvider,
      Provider<FirebaseRemoteConfig> remoteConfigInstanceProvider) {
    return new RewardModule_ProvideRewardRepositoryFactory(dbProvider, remoteConfigInstanceProvider);
  }

  public static RewardRepository provideRewardRepository(RewardDatabase db,
      FirebaseRemoteConfig remoteConfigInstance) {
    return Preconditions.checkNotNullFromProvides(RewardModule.INSTANCE.provideRewardRepository(db, remoteConfigInstance));
  }
}
