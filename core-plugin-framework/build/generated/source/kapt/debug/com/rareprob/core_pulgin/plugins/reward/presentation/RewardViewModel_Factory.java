// Generated by Dagger (https://dagger.dev).
package com.rareprob.core_pulgin.plugins.reward.presentation;

import com.rareprob.core_pulgin.plugins.reward.domain.use_case.RewardUseCase;
import com.rareprob.core_pulgin.plugins.reward.domain.use_case.ThemeUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RewardViewModel_Factory implements Factory<RewardViewModel> {
  private final Provider<RewardUseCase> rewardUseCaseProvider;

  private final Provider<ThemeUseCase> themeUseCaseProvider;

  public RewardViewModel_Factory(Provider<RewardUseCase> rewardUseCaseProvider,
      Provider<ThemeUseCase> themeUseCaseProvider) {
    this.rewardUseCaseProvider = rewardUseCaseProvider;
    this.themeUseCaseProvider = themeUseCaseProvider;
  }

  @Override
  public RewardViewModel get() {
    return newInstance(rewardUseCaseProvider.get(), themeUseCaseProvider.get());
  }

  public static RewardViewModel_Factory create(Provider<RewardUseCase> rewardUseCaseProvider,
      Provider<ThemeUseCase> themeUseCaseProvider) {
    return new RewardViewModel_Factory(rewardUseCaseProvider, themeUseCaseProvider);
  }

  public static RewardViewModel newInstance(RewardUseCase rewardUseCase,
      ThemeUseCase themeUseCase) {
    return new RewardViewModel(rewardUseCase, themeUseCase);
  }
}
