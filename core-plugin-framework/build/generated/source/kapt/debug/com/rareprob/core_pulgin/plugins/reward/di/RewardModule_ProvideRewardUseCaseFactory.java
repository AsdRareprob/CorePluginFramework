// Generated by Dagger (https://dagger.dev).
package com.rareprob.core_pulgin.plugins.reward.di;

import com.rareprob.core_pulgin.plugins.reward.domain.repository.RewardRepository;
import com.rareprob.core_pulgin.plugins.reward.domain.use_case.RewardUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RewardModule_ProvideRewardUseCaseFactory implements Factory<RewardUseCase> {
  private final Provider<RewardRepository> repositoryProvider;

  public RewardModule_ProvideRewardUseCaseFactory(Provider<RewardRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public RewardUseCase get() {
    return provideRewardUseCase(repositoryProvider.get());
  }

  public static RewardModule_ProvideRewardUseCaseFactory create(
      Provider<RewardRepository> repositoryProvider) {
    return new RewardModule_ProvideRewardUseCaseFactory(repositoryProvider);
  }

  public static RewardUseCase provideRewardUseCase(RewardRepository repository) {
    return Preconditions.checkNotNullFromProvides(RewardModule.INSTANCE.provideRewardUseCase(repository));
  }
}
